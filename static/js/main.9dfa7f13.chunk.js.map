{"version":3,"sources":["logo.svg","LoginComponent.js","Constants.js","GameComponent.js","AdminComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginComponent","props","tailLayout","wrapperCol","offset","span","labelCol","onFinish","values","joinGame","Item","name","label","rules","required","size","type","htmlType","onClick","room","Math","random","toString","substr","toUpperCase","createGame","baseURL","answerURL","questionURL","socketURL","readableConnectionStatus","status","GameComponent","state","question","questionStyle","acceptAnswers","waiting","connected","submitAnswer","bind","answerForm","socket","socketIOClient","path","query","this","transports","on","setState","data","console","log","fetch","method","headers","body","JSON","stringify","answer","points","player","response","alert","title","onBack","goBack","subTitle","React","Component","AdminComponent","players","answers","asked","mapPlayersToList","mapAnswersToList","adjustScore","adjustPoints","submitQuestion","pointAdjusters","applyPoints","questionForm","toggleCorrect","waitingText","oldState","find","correct","playerName","score","value","playerIndex","findIndex","parse","answerIndex","sort","a","b","map","className","key","checked","onChange","forEach","allowNewQuestion","length","window","confirm","TextArea","placeholder","content","questionStyles","trigger","extra","questionStyleReadable","App","page","loadGame","loadAdmin","loadLogin","loginValues","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9dfa7f13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import {Button, Form, Input} from 'antd';\r\nimport React from \"react\";\r\n\r\nexport default function LoginComponent(props) {\r\n    const layout = {\r\n        labelCol: {span: 8},\r\n        wrapperCol: {span: 16},\r\n    };\r\n    const tailLayout = {\r\n        wrapperCol: {offset: 8, span: 16},\r\n    };\r\n\r\n    const onFinish = values => {\r\n        props.joinGame(values);\r\n    }\r\n\r\n    const createGame = () => {\r\n        // TODO: figure out a way to make this work with UUID so it is like actually random\r\n        const room = Math.random().toString(36).substr(2, 4).toUpperCase();\r\n        props.createGame(room);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Aroon Trivia</h1>\r\n            <Form {...layout} onFinish={onFinish}>\r\n                <Form.Item name=\"room\" label=\"Room Code\" rules={[{required: true}]}>\r\n                    <Input size=\"large\"/>\r\n                </Form.Item>\r\n                <Form.Item name=\"name\" label=\"Your Name\" rules={[{required: true}]}>\r\n                    <Input size=\"large\"/>\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout}>\r\n                    <Button type=\"primary\" size=\"large\" htmlType=\"submit\">Join Game</Button>\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout}>\r\n                    <Button size=\"large\" onClick={createGame}>Create Game</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","const baseURL =  process.env.NODE_ENV === 'production' ? 'https://aroon-trivia.azurewebsites.net' : 'http://localhost:8080';\r\n\r\nexport const answerURL = `${baseURL}/answer`;\r\nexport const questionURL = `${baseURL}/question`;\r\nexport const socketURL = `${baseURL}`;\r\n\r\nexport function questionStyleReadable(questionStyle) {\r\n    switch (questionStyle) {\r\n        case 'wager':\r\n            return 'Wager';\r\n        case 'wagerLoss':\r\n            return 'Wager with Loss';\r\n        case 'pointPer':\r\n            return 'Point-per-Question';\r\n        case 'custom':\r\n            return 'Gamemaster Chooses';\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nexport function readableConnectionStatus(status) {\r\n    return status ? 'Connected' : '❌ Disconnected';\r\n}\r\n\r\nexport const wagerDesc = 'The players choose how many points to wager on their question. If they get it right, those points are added to their score. If they get it wrong, there is no penalty.';\r\nexport const wagerLossDesc = 'The players choose how many points to wager on their question. If they get it right, those points are added to their score. If they get it wrong, those points are subtracted from their score.';\r\nexport const pointPerDesc = 'The players get one point added to their scores if they get it right.';\r\nexport const customDesc = 'The Gamemaster chooses how many points to award each player for their answer. Great for open-ended questions!';","import React from \"react\";\r\nimport { Button, Form, Input, InputNumber, PageHeader } from \"antd\";\r\nimport socketIOClient from 'socket.io-client';\r\nimport { answerURL, readableConnectionStatus, socketURL } from \"./Constants\";\r\n\r\nexport default class GameComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {question: 'Waiting for a question...', questionStyle: '', acceptAnswers: false, waiting: false, connected: false}\r\n        this.submitAnswer = this.submitAnswer.bind(this);\r\n        this.answerForm = this.answerForm.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const socket = socketIOClient(socketURL, {\r\n            path: '/register', query: {\r\n                room: this.props.room,\r\n                name: this.props.name\r\n            }, transports: ['websocket']\r\n        });\r\n        socket.on('connect', () => {\r\n            this.setState({\r\n               connected: true\r\n            });\r\n        });\r\n        socket.on('disconnect', () => {\r\n            this.setState({\r\n               connected: false\r\n            });\r\n        });\r\n        socket.on('question', data => {\r\n            console.log(data);\r\n            this.setState({\r\n                question: data.question,\r\n                questionStyle: data.questionStyle,\r\n                acceptAnswers: true\r\n            });\r\n        });\r\n    }\r\n\r\n    async submitAnswer(values) {\r\n        try {\r\n            this.setState({\r\n                waiting: true\r\n            });\r\n            const response = await fetch(answerURL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    answer: values.answer,\r\n                    points: values.points,\r\n                    room: this.props.room,\r\n                    player: this.props.name\r\n                })\r\n            });\r\n            if (response.status !== 200) {\r\n                alert(`Unable to submit answer. Error message: ${response.status} Response`);\r\n            } else {\r\n                this.setState({\r\n                    question: 'Answer received! Waiting for another question...',\r\n                    acceptAnswers: false,\r\n                });\r\n            }\r\n        } catch (e) {\r\n            alert(`Unable to submit answer. Error message: ${e}`)\r\n        } finally {\r\n            this.setState({\r\n                waiting: false\r\n            });\r\n        }\r\n    }\r\n\r\n    answerForm() {\r\n        const layout = {\r\n            labelCol: {span: 8},\r\n            wrapperCol: {span: 16},\r\n        };\r\n        const tailLayout = {\r\n            wrapperCol: {offset: 8, span: 16},\r\n        };\r\n\r\n        return <Form {...layout} onFinish={this.submitAnswer}>\r\n            <Form.Item name=\"answer\" label=\"Answer\" rules={[{required: true}]}>\r\n                <Input size=\"large\"/>\r\n            </Form.Item>\r\n            {this.state.questionStyle !== 'custom' && this.state.questionStyle !== 'pointPer' ?\r\n                <Form.Item name=\"points\" label=\"Points\" rules={[{required: true}]}>\r\n                    <InputNumber size=\"large\"/>\r\n                </Form.Item> : null}\r\n            <Form.Item {...tailLayout}>\r\n                {this.state.waiting ? <div>Submitting answer...</div> :\r\n                    <Button type=\"primary\" size=\"large\" htmlType=\"submit\">Submit Answer</Button>}\r\n            </Form.Item>\r\n        </Form>\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (<div>\r\n                <PageHeader title={`Game ${this.props.room}`} onBack={this.props.goBack} subTitle={readableConnectionStatus(this.state.connected)}/>\r\n                <h3>Question</h3>\r\n                <p>{this.state.question}</p>\r\n                {this.state.acceptAnswers ? this.answerForm() : null}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Button, Card, Checkbox, Form, Input, PageHeader, Popover, Select } from \"antd\";\r\nimport socketIOClient from 'socket.io-client';\r\nimport {\r\n    customDesc,\r\n    pointPerDesc,\r\n    questionStyleReadable,\r\n    questionURL, readableConnectionStatus,\r\n    socketURL,\r\n    wagerDesc,\r\n    wagerLossDesc\r\n} from './Constants';\r\nimport { Option } from 'antd/lib/mentions';\r\n\r\nexport default class AdminComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {players: [], answers: [], question: '', questionStyle: '', waiting: false, asked: 0, connected: false}\r\n        this.mapPlayersToList = this.mapPlayersToList.bind(this);\r\n        this.mapAnswersToList = this.mapAnswersToList.bind(this);\r\n        this.adjustScore = this.adjustScore.bind(this);\r\n        this.adjustPoints = this.adjustPoints.bind(this);\r\n        this.submitQuestion = this.submitQuestion.bind(this);\r\n        this.pointAdjusters = this.pointAdjusters.bind(this);\r\n        this.applyPoints = this.applyPoints.bind(this);\r\n        this.questionForm = this.questionForm.bind(this);\r\n        this.toggleCorrect = this.toggleCorrect.bind(this);\r\n        this.waitingText = this.waitingText.bind(this);\r\n    }\r\n\r\n    // TODO: stop hacking around the duplicate state calls and fix it; see the increment function\r\n    componentDidMount() {\r\n        const socket = socketIOClient(socketURL, {\r\n            path: '/register', query: {\r\n                room: this.props.room + '-admin'\r\n            }, transports: ['websocket']\r\n        });\r\n        socket.on('connect', () => {\r\n            this.setState({\r\n                connected: true\r\n            });\r\n        });\r\n        socket.on('disconnect', () => {\r\n            this.setState({\r\n                connected: false\r\n            });\r\n        });\r\n        socket.on('submission', data => {\r\n            this.setState(oldState => {\r\n                if (!(oldState.answers.find(answer => answer.player === data.player) > -1)) {\r\n                    if (this.state.questionStyle === 'custom') {\r\n                        data.points = 0;\r\n                        data.correct = true;\r\n                    } else if (this.state.questionStyle === 'pointPer') {\r\n                        data.points = 1;\r\n                        data.correct = false;\r\n                    } else {\r\n                        data.correct = false;\r\n                    }\r\n                    return {\r\n                        answers: [data, ...oldState.answers]\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        socket.on('join', playerName => {\r\n            this.setState(oldState => {\r\n                if (!(oldState.players.find(player => player.name === playerName) > -1)) {\r\n                    const player = {\r\n                        name: playerName,\r\n                        score: 0\r\n                    };\r\n                    return {\r\n                        players: [player, ...oldState.players]\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    adjustScore(playerName, value) {\r\n        this.setState(oldState => {\r\n            const playerIndex = oldState.players.findIndex(player => player.name === playerName);\r\n            const players = JSON.parse(JSON.stringify(oldState.players));\r\n            players[playerIndex].score += value;\r\n            return {\r\n                players: players\r\n            };\r\n        });\r\n    }\r\n\r\n    adjustPoints(playerName, value) {\r\n        this.setState(oldState => {\r\n            const answerIndex = oldState.answers.findIndex(answer => answer.player === playerName);\r\n            const answers = JSON.parse(JSON.stringify(oldState.answers));\r\n            answers[answerIndex].points += value;\r\n            return {\r\n                answers: answers\r\n            };\r\n        });\r\n    }\r\n\r\n    toggleCorrect(playerName) {\r\n        this.setState(oldState => {\r\n            const answerIndex = oldState.answers.findIndex(answer => answer.player === playerName);\r\n            const answers = JSON.parse(JSON.stringify(oldState.answers));\r\n            answers[answerIndex].correct = !answers[answerIndex].correct\r\n            return {\r\n                answers: answers\r\n            };\r\n        });\r\n    }\r\n\r\n    mapPlayersToList(players) {\r\n        return players.sort((a, b) => a.score > b.score).map(player => {\r\n            return <li className=\"list\" key={player.name}>\r\n                <strong>{player.name}</strong><span className=\"bump-left\">{player.score}</span>\r\n                <Button size=\"small\" className=\"big-bump-left\"\r\n                        onClick={() => this.adjustScore(player.name, -1)}>-</Button>\r\n                <Button size=\"small\" onClick={() => this.adjustScore(player.name, 1)}>+</Button>\r\n            </li>\r\n        });\r\n    }\r\n\r\n    mapAnswersToList(answers) {\r\n        return answers.map(answer => {\r\n            return <li className=\"list\" key={answer.player}>\r\n                <h4>{answer.player}</h4>\r\n                <i>{answer.answer}</i>\r\n                {this.state.questionStyle !== 'pointPer' ?\r\n                    <strong className=\"bump-left\">{answer.points}</strong> : null}\r\n                {this.state.questionStyle === 'custom' ? this.pointAdjusters(answer) : null}\r\n                {this.state.questionStyle !== 'custom' ? <Checkbox className=\"big-bump-left\" checked={answer.correct}\r\n                                                                   onChange={() => this.toggleCorrect(answer.player)}>Correct</Checkbox> : null}\r\n            </li>\r\n        });\r\n    }\r\n\r\n    pointAdjusters(answer) {\r\n        return (\r\n            <div className=\"inline\">\r\n                <Button size=\"small\" className=\"big-bump-left\"\r\n                        onClick={() => this.adjustPoints(answer.player, -1)}>-</Button>\r\n                <Button size=\"small\" onClick={() => this.adjustPoints(answer.player, 1)}>+</Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    applyPoints() {\r\n        this.state.answers.forEach(answer => {\r\n            this.setState(oldState => {\r\n                let players = JSON.parse(JSON.stringify(oldState.players));\r\n                let playerIndex = players.findIndex(player => player.name === answer.player);\r\n                if (answer.correct) {\r\n                    if (oldState.questionStyle === 'pointPer') {\r\n                        players[playerIndex].score += 1;\r\n                    } else {\r\n                        players[playerIndex].score += answer.points;\r\n                    }\r\n                    return {\r\n                        players: players\r\n                    }\r\n                } else if (oldState.questionStyle === 'wagerLoss') {\r\n                    players[playerIndex].score -= answer.points;\r\n                    return {\r\n                        players: players\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        this.setState({\r\n            answers: [],\r\n            question: '',\r\n            questionStyle: ''\r\n        });\r\n    }\r\n\r\n    async submitQuestion(values) {\r\n        let allowNewQuestion = true;\r\n        if (this.state.answers.length > 0) {\r\n            allowNewQuestion = window.confirm('You haven\\'t applied the points from the last question - are you sure you want to ask a new one?');\r\n        }\r\n        if (allowNewQuestion) {\r\n            try {\r\n                this.setState({\r\n                    waiting: true\r\n                });\r\n                const response = await fetch(questionURL, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        question: values.question,\r\n                        questionStyle: values.questionStyle,\r\n                        room: this.props.room\r\n                    })\r\n                });\r\n                if (response.status !== 200) {\r\n                    alert(`Unable to submit question. Error message: ${response.status} Response`);\r\n                } else {\r\n                    this.setState(oldState => {\r\n                        return {\r\n                            asked: oldState.asked + 1,\r\n                            question: values.question,\r\n                            questionStyle: values.questionStyle,\r\n                            answers: []\r\n                        }\r\n                    });\r\n                }\r\n            } catch (e) {\r\n                alert(`Unable to submit question. Error message: ${e}`)\r\n            } finally {\r\n                this.setState({\r\n                    waiting: false\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    questionStyles() {\r\n        return (<ul>\r\n            <li>\r\n                <strong>Wager</strong><span className=\"bump-left\">{wagerDesc}</span>\r\n            </li>\r\n            <li>\r\n                <strong>Wager with Loss</strong><span className=\"bump-left\">{wagerLossDesc}</span>\r\n            </li>\r\n            <li>\r\n                <strong>Point-per-Question</strong><span className=\"bump-left\">{pointPerDesc}</span>\r\n            </li>\r\n            <li>\r\n                <strong>Gamemaster Chooses</strong><span className=\"bump-left\">{customDesc}</span>\r\n            </li>\r\n        </ul>)\r\n    }\r\n\r\n    questionForm() {\r\n        const layout = {\r\n            labelCol: {span: 4},\r\n            wrapperCol: {span: 20},\r\n        };\r\n        const tailLayout = {\r\n            wrapperCol: {offset: 4, span: 20},\r\n        };\r\n\r\n        return <Form {...layout} onFinish={this.submitQuestion}>\r\n            <Form.Item name=\"question\" label=\"Question\" rules={[{required: true}]}>\r\n                <Input.TextArea/>\r\n            </Form.Item>\r\n            <Form.Item name=\"questionStyle\" label=\"Question Style\" rules={[{required: true}]}>\r\n                <Select placeholder=\"Select a question style...\">\r\n                    <Option value=\"wager\">Wager</Option>\r\n                    <Option value=\"wagerLoss\">Wager with Loss</Option>\r\n                    <Option value=\"pointPer\">Point-per-Question</Option>\r\n                    <Option value=\"custom\">Gamemaster Chooses</Option>\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item {...tailLayout}>\r\n                {this.state.waiting ? <div>Submitting question...</div> :\r\n                    <Button type=\"primary\" size=\"large\" htmlType=\"submit\">Submit Question</Button>}\r\n                <Popover title=\"Question Styles\" content={this.questionStyles()} trigger=\"click\">\r\n                    <Button size=\"large\" className=\"bump-left\">Question Style Help</Button>\r\n                </Popover>\r\n            </Form.Item>\r\n        </Form>\r\n    }\r\n\r\n    waitingText() {\r\n        return this.state.question !== '' ? 'Waiting for answers...' : 'Ask a question!';\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <PageHeader title={`Game ${this.props.room}`} onBack={this.props.goBack} subTitle={readableConnectionStatus(this.state.connected)}/>\r\n            <Card title={`Players`} extra={`${this.state.players.length}`}>\r\n                <ul>\r\n                    {this.mapPlayersToList(this.state.players)}\r\n                </ul>\r\n            </Card>\r\n            <Card title={`Answers`}\r\n                  extra={`${this.state.answers.length}/${this.state.players.length}`}>\r\n                {this.state.question !== '' ?\r\n                    <p><strong>{questionStyleReadable(this.state.questionStyle)}</strong> - {this.state.question}\r\n                    </p> : null}\r\n                <ul>\r\n                    {this.mapAnswersToList(this.state.answers)}\r\n                </ul>\r\n                {this.state.answers.length > 0 ?\r\n                    <Button size=\"large\" type=\"primary\" onClick={this.applyPoints}>Apply Points</Button> :\r\n                    <i>{this.waitingText()}</i>}\r\n            </Card>\r\n            <Card title=\"Question\" extra={`${this.state.asked} question${this.state.asked === 1 ? '' : 's'} asked`}>\r\n                {this.questionForm()}\r\n            </Card>\r\n        </div>;\r\n    }\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport LoginComponent from \"./LoginComponent\";\r\nimport GameComponent from \"./GameComponent\";\r\nimport AdminComponent from \"./AdminComponent\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {room: '', name: '', page: 'login'}\r\n        this.loadGame = this.loadGame.bind(this);\r\n        this.loadAdmin = this.loadAdmin.bind(this);\r\n        this.loadLogin = this.loadLogin.bind(this);\r\n    }\r\n\r\n    loadGame(loginValues) {\r\n        this.setState({\r\n            room: loginValues.room,\r\n            name: loginValues.name,\r\n            page: 'game'\r\n        });\r\n    }\r\n\r\n    loadAdmin(room) {\r\n        this.setState({\r\n            room: room,\r\n            page: 'admin'\r\n        });\r\n    }\r\n\r\n    loadLogin() {\r\n        this.setState({\r\n            page: 'login'\r\n        });\r\n    }\r\n\r\n    render() {\r\n        switch (this.state.page) {\r\n            case \"admin\":\r\n                return <AdminComponent room={this.state.room} goBack={this.loadLogin}/>\r\n            case \"game\":\r\n                return <GameComponent room={this.state.room} name={this.state.name} goBack={this.loadLogin}/>\r\n            default:\r\n                return <LoginComponent joinGame={this.loadGame} createGame={this.loadAdmin}/>\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}